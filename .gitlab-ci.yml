stages:
    - lint
    - build
    - test
    - deploy

variables:
    DOCKER_TLS_CERTDIR: '/certs'
    PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'

# Defines the job in Static Analysis
pylint:
    image: python:alpine
    stage: lint
    tags:
        - python
    before_script:
        - .gitlab/pip_install.sh
        - .gitlab/django_before.sh
    script:
        - source venv/bin/activate
        - pylama .
    # These folders are cached for the remaining jobs
    cache:
        paths:
            - .cache/pip/
            - venv/

# Defines the job in build
# Checks if migrations files are missing
migrations:
    image: python:alpine
    stage: build
    tags:
        - python
    needs: ['pylint']
    before_script:
        - .gitlab/django_before.sh
    script:
        - source venv/bin/activate
        - python3 manage.py makemigrations --check
        - python3 manage.py migrate --check
        - python3 manage.py check
        - python3 manage.py check --database default
        - python3 manage.py check --deploy

# Defines the job in test
test:
    image: python:alpine
    stage: test
    tags:
        - python
    needs: ['migrations', 'pylint']
    before_script:
        - .gitlab/django_before.sh
    script:
        - source venv/bin/activate
        - coverage run manage.py test
        - coverage xml
        - coverage report

    coverage: '/TOTAL.*\s+(\d+%)$/'
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage.xml

# Only Team Member A (GITLAB_USER_LOGIN_A) can trigger this job
staging-a:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['test', 'migrations']
    rules:
        # Only run this job if Team Member A is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_A &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-a --api-key=$HEROKU_API_KEY_A

# Only Team Member B (GITLAB_USER_LOGIN_B) can trigger this job
staging-b:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['test', 'migrations']
    rules:
        # Only run this job if Team Member B is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_B &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-b --api-key=$HEROKU_API_KEY_B

# Only Team Member C (GITLAB_USER_LOGIN_C) can trigger this job
staging-c:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['test', 'migrations']
    rules:
        # Only run this job if Team Member C is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_C &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-c --api-key=$HEROKU_API_KEY_C

# Only Team Member D (GITLAB_USER_LOGIN_D) can trigger this job
staging-d:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['test', 'migrations']
    rules:
        # Only run this job if Team Member D is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_D &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-d --api-key=$HEROKU_API_KEY_D

# This job is triggered when there is a (merge request) commit in the main branch
production:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['test', 'migrations']
    only:
        # Limit this job to the main branch
        - main
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING} --api-key=$HEROKU_API_KEY_A
