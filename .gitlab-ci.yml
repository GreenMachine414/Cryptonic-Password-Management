stages:
  - lint
  - build
  - test

variables:
  PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'
  DATABASE_URL: 'sqlite:///db.sqlite3' # Use an appropriate database for your pipeline

cache:
  paths:
    - .cache/pip/
    - venv/
    - staticfiles/

# Linting job
django-lint:
  image: python:3.11-alpine
  stage: lint
  tags:
    - python
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install ruff # Only need to install ruff, remove pylama
  script:
    - ruff check . --fix # Use ruff for linting instead of pylama

# Build job for migrations and checks
django-migrations:
  image: python:3.11-alpine
  stage: build
  tags:
    - python
  needs: ['django-lint']
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python manage.py makemigrations --check
    - python manage.py migrate --check
    - python manage.py check
    - python manage.py check --database default
    - python manage.py check --deploy

# Test job
django-tests:
  image: python:3.11-alpine
  stage: test
  tags:
    - python
  needs: ['django-migrations', 'django-lint']
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python manage.py collectstatic --noinput
    - coverage run manage.py test -v2
    - coverage xml
    - coverage report
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
