stages:
    - lint
    - build
    - test
    - deploy

variables:
    DOCKER_TLS_CERTDIR: '/certs'
    PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
    paths:
        - .cache/pip/
        - venv/
        - staticfiles/

# Defines the job in Static Analysis
django-lint:
    image: python:alpine
    stage: lint
    tags:
        - python
    before_script:
        - .gitlab/django_before_install.sh
        - source venv/bin/activate
    script:
        - pylama .

# Defines the job in build
# Checks if migrations files are missing
django-migrations:
    image: python:alpine
    stage: build
    tags:
        - python
    needs: ['django-lint']
    before_script:
        - .gitlab/django_before_install.sh
        - source venv/bin/activate
    script:
        - python3 manage.py makemigrations --check
        - python3 manage.py migrate --check
        - python3 manage.py check
        - python3 manage.py check --database default
        - python3 manage.py check --deploy

# Defines the job in docker build
docker-build:
    image: docker:20.10.14
    stage: build
    tags:
        - dind
    needs: ['django-migrations']
    services:
        - docker:20.10.14-dind
    before_script:
        - .gitlab/docker_build.sh
    script:
        - docker-compose -f docker-compose.dev.yml build

# Defines the job in test
django-tests:
    image: python:alpine
    stage: test
    tags:
        - python
    needs: ['django-migrations', 'django-lint']
    before_script:
        - .gitlab/django_before_install.sh
        - source venv/bin/activate
    script:
        - coverage run manage.py test
        - coverage xml
        - coverage report

    coverage: '/TOTAL.*\s+(\d+%)$/'
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage.xml

# Only Team Member A (GITLAB_USER_LOGIN_A) can trigger this job
staging-a:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['django-tests']
    rules:
        # Only run this job if Team Member A is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_A &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-a --api-key=$HEROKU_API_KEY_A

# Only Team Member B (GITLAB_USER_LOGIN_B) can trigger this job
staging-b:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['django-tests']
    rules:
        # Only run this job if Team Member B is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_B &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-b --api-key=$HEROKU_API_KEY_B

# Only Team Member C (GITLAB_USER_LOGIN_C) can trigger this job
staging-c:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['django-tests']
    rules:
        # Only run this job if Team Member C is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_C &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-c --api-key=$HEROKU_API_KEY_C

# Only Team Member D (GITLAB_USER_LOGIN_D) can trigger this job
staging-d:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['django-tests']
    rules:
        # Only run this job if Team Member D is pushing to a non main branch
        - if: $GITLAB_USER_LOGIN == $GITLAB_USER_LOGIN_D &&
              $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH &&
              $CI_PIPELINE_SOURCE != 'merge_request_event'
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING}-d --api-key=$HEROKU_API_KEY_D

# This job is triggered when there is a (merge request) commit in the main branch
production:
    image: ruby:latest
    stage: deploy
    tags:
        - ruby
    needs: ['django-tests']
    only:
        # Limit this job to the main branch
        - main
    before_script:
        - .gitlab/dpl_before_script.sh
    script:
        - dpl --provider=heroku --app=${HEROKU_APP_STAGING} --api-key=$HEROKU_API_KEY_A
